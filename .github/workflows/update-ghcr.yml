# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Image to ghcr.io

on:
  push:
    branches:
      - main
  release:
    types: [published]

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=pep440,pattern={{version}}

      - name: Create Dockerfile
        run: |
          cat <<EOF > Dockerfile
          FROM python:3.9-slim
          EXPOSE 8080
          ENV DOWNLOAD_DIR /app/downloads
          ENV RETENTION_PERIOD_HOURS 24
          ENV BROKER_URL "globalbroker.meteo.fr"
          ENV BROKER_PORT 443
          ENV BROKER_USERNAME "everyone"
          ENV BROKER_PASSWORD "everyone"
          ENV BROKER_PROTOCOL "websockets"
          ENV FLASK_HOST "0.0.0.0"
          ENV FLASK_PORT 8080
          ENV DOWNLOAD_WORKERS 8
          ENV SAVE_LOGS false
          ENV LOGS_DIR /app/logs
          RUN pip install pyopenssl --upgrade && pip install requests==2.26.0 urllib3==1.26.0
          RUN apt-get update && apt-get install -y cron gettext-base
          COPY . /app
          RUN pip install wis2downloader
          WORKDIR /app
          COPY ./docker/clean.py /app/clean.py
          COPY ./docker/clean.cron /etc/cron.d/clean.cron
          RUN chmod 0644 /etc/cron.d/clean.cron && crontab /etc/cron.d/clean.cron
          COPY ./docker/entrypoint.sh /entrypoint.sh
          RUN chmod +x /entrypoint.sh
          ENTRYPOINT [ "/entrypoint.sh" ]
          CMD ["wis2downloader","--config","/app/config.json"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64, linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
